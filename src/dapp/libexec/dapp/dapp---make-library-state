#!/usr/bin/env bash
set -e

if [ "$DAPP_VERBOSE" ]; then set -x; fi

# First, to support library linking, we build up a "state directory"
# that contains the initial deployed contracts.  This way we can
# directly put code at arbitrary addresses, which is how we fake the
# deployed libraries.
#
# Funnily enough, Hevm loads state directories not from the file
# system directly, but via Git.  Because these state directories are
# ephemeral, it adds some complexity to this script: we create a
# one-commit Git repository, run the tests, then delete it.
#
# (The state directory support of Hevm is made to allow persistence.
# That's why we use Git repositories: to get atomic behavior and also
# history tracking.)

sender=0x00a329c0648769a73afac7f9381e08fb43dbea72
nonce=48576
mapfile -t libraries < <(dapp --find-libraries)

state=$(TMPDIR=. mktemp -d hevm.libs.XXXXX)
state="$(dapp --make-cache "$state")"

for lib in "${libraries[@]}"; do
  address=$(dapp address "$sender" "$nonce")
  # shellcheck disable=SC2140
  bin=$(jq -r ."contracts".\""${lib/:*/}"\"."${lib/*:/}".evm.bytecode.object "$DAPP_JSON")
  if [[ "$bin" != null ]] ; then
      echo >&2 "dapp: Predeploying test library $lib at $address"
      mkdir -p "$state/$address"
      hevm exec --address "$address" --code "$bin" --create > /dev/null --gas 1000000000 --state "$state"
  fi
  ((nonce++))
done

echo "$state"
