#!/usr/bin/env bash
### dapp-create -- deploy a compiled contract (--verify on Etherscan)
### Usage: dapp create <contractname> or
###        dapp create <path>:<contractname>
### Add --verify and export your ETHERSCAN_API_KEY to auto-verify on Etherscan
set -e

[[ -e "${DAPP_JSON}" ]] || {
  echo >&2 "${0##*/}: error: ${DAPP_JSON} file not found. Did you run ``dapp build``?"
  exit 1
}

name=${1?missing contract name}

mapfile -t contracts < <(<"$DAPP_JSON" jq '.contracts|keys[]' -r)

name=()

for path in "${contracts[@]}"; do
  if [ -z "${1##*:*}" ]; then
    [[ "$path" = "${1/:*/}" ]] && [[ -n "$(jq .contracts.\""$path"\".\""${1#*:}"\"[]? "$DAPP_JSON")" ]] && name+=("$path")
  else
    [[ -n "$(jq .contracts.\""$path"\".\""$1"\"[]? "$DAPP_JSON")" ]] && name+=("$path")
  fi
done

[[ "${#name[@]}" -eq 0 ]] && {
  echo >&2 "${0##*/}: error: $1 not found"
  exit 1
}

[[ "${#name[@]}" -ge 2 ]] && {
  echo >&2 "${0##*/}: error: $1 found in multiple files. Use full path:"
  printf 'dapp create %s\n' "${name[@]}"
  exit 1
}

contract=$(<"$DAPP_JSON" jq .contracts.\""${name[0]}"\".\""${1#*:}"\")
abi=$(jq .abi -r <<< "$contract")
bin=$(jq .evm.bytecode.object -r <<< "$contract")
type=$(seth --abi-constructor <<< "$abi")
address=$(set -x; seth send --create "$bin" "${type/constructor/${1#*:}}" "${@:2}")

[[ $DAPP_VERIFY_CONTRACT ]] && {
  echo >&2 "Verifying contract at $address"
  sleep 5 # give etherscan some time to process the block
  dapp verify-contract "$path":"${1#*:}" "$address" "${@:2}"
}

seth --to-checksum-address "$address"
