#!/usr/bin/env bash
### dapp-build -- compile the source code
### Usage: dapp build [--extract]
###
###  --extract: After building, write the .abi, .bin and .bin-runtime
###             files from the solc json into $DAPP_OUT. Beware of contract
###             name collisions. This is provided for compatibility with older
###             workflows.
set -e

while [[ $# -gt 0 ]]; do
  opt=$1; shift
  case $opt in
    --extract)
      DAPP_BUILD_EXTRACT=1
      ;;
    *)
      info "unknown argument: $opt"
      exit 1
      ;;
  esac
done

info() {
  while [[ $# -gt 0 ]]; do
    opt=$1; shift
    case $opt in
      -*)
        FLAGS=$opt;
        ;;
      *)
        ARGS=$opt;
        ;;
    esac
  done
  echo >&2 "$FLAGS" "${0##*/}: $ARGS"
}

IFS=" " read -r -a opts <<<"$SOLC_FLAGS"
json_opts=--combined-json=abi,bin,bin-runtime,srcmap,srcmap-runtime,ast,metadata
solc --help | grep -q -- --storage-layout && json_opts+=,storage-layout
solc --help | grep -q -- --overwrite && opts+=(--overwrite)

remappings=$(dapp remappings)
if [[ $remappings ]]; then
  while read -r line; do opts+=("$line"); done <<<"$remappings"
fi

if [ "$DAPP_LINK_TEST_LIBRARIES" = 1 ]; then
  DAPP_LINK_TEST_LIBRARIES=0 dapp build
  sender=0x00a329c0648769a73afac7f9381e08fb43dbea72
  nonce=1048576
  mapfile -t libraries < <(dapp --find-libraries)

  if [[ ${#libraries[@]} -eq 0 ]]; then exit; fi

  info "rebuilding with linked libraries"
  for lib in "${libraries[@]}"; do
    address=$(dapp address "$sender" "$nonce")
    links+=" $lib:$address"
    ((nonce++))
  done
  opts+=(--libraries "$links")
else
  (set -x; dapp clean)
fi

mkdir -p "$DAPP_OUT"
mapfile -t files < <(find "${DAPP_SRC}" -name '*.sol')
(set -x; solc "${opts[@]}" "${json_opts[@]}" /=/ "${files[@]}" > "${DAPP_JSON}")

if [ "$DAPP_BUILD_EXTRACT" ]; then
  mapfile -t contracts < <(<"$DAPP_JSON" jq '.contracts|keys[]' -r | sort -u -t: -k2 | sort)
  data=$(<"$DAPP_JSON" jq '.contracts' -r)
  count=1
  total=${#contracts[@]}
  for path in "${contracts[@]}"; do
    info -ne "Extracting build data... [$count/$total]\\r"
    ((count++))
    name="${path#*:}"
    contract=$(echo "$data" | jq '.[''"'"$path"'"'']')
    echo "$contract" | jq '.["abi"]' -r > "$DAPP_OUT/$name.abi"
    echo "$contract" | jq '.["bin"]' -r > "$DAPP_OUT/$name.bin"
    echo "$contract" | jq '.["bin-runtime"]' -r > "$DAPP_OUT/$name.bin-runtime"
    echo "$contract" | jq '.["metadata"]' -r > "$DAPP_OUT/$name.metadata"
  done
  echo
  info "warning: --extract is slow and may have filename collisions. All build data can be found in $DAPP_JSON.\\n"
fi
