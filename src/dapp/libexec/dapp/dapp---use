#!/usr/bin/env bash
set -e

function usage() {
  echo >&2 "Usage: dapp --use <spec> <subcommand>..."
  echo >&2 "Example:"
  echo >&2
  echo >&2 "  $ dapp --use solc:0.4.11 test"
  echo >&2
  exit 1
}

[[ "$#" -gt 0 ]] || usage

query() {
  nix-env -q --installed --out-path --no-name "$1" 2>/dev/null
}

# Profiles created with the experimental nix commands are incompatible with nix-env ones, so we need to handle them separately.
query_nix3() {
  nix profile list 2>/dev/null | grep "$1"
}

shopt -s extglob
case $1 in
  # package spec e.g. solc:0.4.12
  solc:[0-9].+([0-9.]))
    solc="solc-${1#solc:}"
    if store_path=$(query "solc-${1#solc:}"); then
      bin="$store_path/bin/solc"
    elif output=$(query_nix3 "solc-${1#solc:}"); then
      store_path=$(echo "$output" | cut -d " " -f 4)
      bin="$store_path/bin/solc"
    elif store_path=$(query "solc-static-${1#solc:}"); then
      bin="$store_path/bin/$solc"
    elif output=$(query_nix3 "solc-static-${1#solc:}"); then
      store_path=$(echo "$output" | cut -d " " -f 4)
      bin="$store_path/bin/$solc"
    else
      bin=""
    fi
    ;;
  # some other solc binary name
  solc*)
    solc="$1"
    set +e
    bin="$(type -p "$solc")"
    ;;
  # if there's a '/', interpret as a path
  */*)
    bin="$1"
    ;;
  *)
    echo >&2 "${0##*/}: unrecognized package spec: $1"
    exit 1
esac
shift

[[ "$#" -gt 0 ]] || usage

if [[ -z "$bin" ]]; then
  dapp --nix-run "dapp.override {solc = pkgs.runCommand \"solc\" { } \"mkdir -p \$out/bin; ln -s \${solc-static-versions.${solc//[-.]/_}}/bin/${solc} \$out/bin/solc\";}" out "$@"
else
  set -e
  SOLCBIN="$(realpath -e "${bin}")"

  DAPP_SOLC="$SOLCBIN" dapp "$@"
fi
