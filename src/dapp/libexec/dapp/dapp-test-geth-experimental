#!/usr/bin/env bash
set -e
shopt -s nullglob

# To run the unit tests as fast as possible, we need to avoid serial
# blockchain interactions.  Preferably we would be done in two
# blocks, one for creating contracts, one for running the tests
# against them.
#
# We need to run the tests on-chain because they fail by setting the
# `failed` storage slot.  So we need to call the test method and
# then check that slot.
#
# Because we also want a clean slate before every test method, we
# create many copies of the same test contract, one for each
# test method.

testnets=("$HOME"/.dapp/testnet/*)

if [[ ${#testnets[@]} -gt 1 ]]; then
  echo >&2 "dapp-test-geth: Several dapp testnets running: ${testnets[*]}"
  echo >&2 "dapp-test-geth: I can only handle one, sorry."
  exit 1
elif [[ ${#testnets[@]} -eq 0 ]]; then
  echo >&2 "dapp-test-geth: Please run 'dapp testnet' in another terminal."
  exit 1
fi

testnet=${testnets[0]}

ETH_FROM=$(cat "$testnet/config/account")
ETH_RPC_PORT=$(sed 's/^.*://' "$testnet/config/rpc-url")
ETH_RPC_HOST=127.0.0.1
ETH_GAS=$(printf "%d" 0xffffffff)
ETH_RPC_ACCOUNTS=1
export ETH_FROM ETH_RPC_PORT ETH_RPC_HOST ETH_GAS ETH_RPC_ACCOUNTS

# We use a temporary directory as a little database.
tmp=$(mktemp -d)
clean() { rm -rf "$tmp"; }
trap clean EXIT

# Go through all the contract ABIs and look for ds-test suites.
for x in "$DAPP_OUT"/*.abi; do
  contract=$(sed <<<"$(basename "$x")" s/\.abi$//)

  # Deploy one instance per test method.
  shutup=0
  while read -r method; do
    if [[ $shutup -eq 0 ]]; then
      echo >&2 "dapp-test-geth: deploying test copies for $contract"
      mkdir "$tmp/$contract"
      shutup=1
    fi
    {
      SETH_STATUS=1 dapp create "$contract" >"$tmp/$contract/$method" 2>/dev/null
      if [[ ! $? ]]; then touch "$tmp/fail"; fi
    } &
  done < <(dapp --find-test-methods "$x" 2>/dev/null)
done

wait
if [ -e "$tmp/fail" ]; then
  echo >&2 "dapp-test-geth: error: some contract creations failed"
fi

mkdir "$tmp/results"

no0x() { echo "${1#0x}"; }
setUp=$(no0x "$(seth calldata "setUp()")")
assemble() { tr -d '\n '; }
mkruntime() {
  assemble <<.
  60 00
  60 00
  60 20
  60 00
  60 00
  73 $1
  5a
  61 02 00
  03

  63 $setUp
  60 e0
  60 02
  0a
  02
  60 00
  52
  f1
  15
  60 6e
  57
  60 00
  60 00
  60 20
  60 00
  60 00
  73 $1
  5a
  61 02 00
  03
  63 $2
  60 e0
  60 02
  0a
  02
  60 00
  52
  f1
  15
  60 6e
  57
  00
  fd
.
}

mkcreation() {
  address=$(no0x "$1")
  method=$(no0x "$(seth calldata "$2()")")
  runtime=$(mkruntime "$address" "$method")
  codesize=${#runtime}
  codesize=$((codesize / 2))
  assemble <<.
  61 $(printf "%04x" "$codesize")
  60 00
  81
  60 0c
  60 00
  39
  f3
  $runtime
.
}

fail() { echo "FAIL $contract::$method"; touch "$tmp/fail"; }
pass() { echo "PASS $contract::$method"; }

testcase() {
  creation=$(mkcreation "$address" "$method")
  testaddress=$(seth send --create "$creation" --status 2>/dev/null)
  if seth send "$testaddress" --status 2>/dev/null; then
    result=$(seth call "$address" 'failed()(bool)')
    if [[ "$result" == true ]]; then
      if [[ "$method" == testFail* ]]; then pass; else fail; fi
    else
      if [[ "$method" == testFail* ]]; then fail; else pass; fi
    fi
  else
    if [[ "$method" == testFail* ]]; then pass; else fail; fi
  fi
}

# Run all test cases in parallel...
for contract in "$tmp"/*; do
  for method in $(printf "%s\\n" "$contract"/*); do
    address=$(cat "$method")
    contract=$(basename "$contract")
    method=$(basename "$method")
    testcase &
  done
done

wait

if [ -e "$tmp/fail" ]; then
  echo >&2 "dapp-test-geth: some unit tests failed"
  exit 1
fi
