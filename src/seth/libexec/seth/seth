#!/usr/bin/env bash
### seth -- command-line Ethereum RPC client
### Usage: seth [<options>] <command> [<args>]
###    or: seth <command> --help
###
### Perform Ethereum RPC calls from the comfort of your command line.
###
### Connection options:
###
###    --rpc-host=<host>          JSON-RPC host (default: `localhost')
###    --rpc-port=<port>          JSON-RPC port (default: `8545')
###    --rpc-url=<url>            JSON-RPC URL (overrides host and port)
###    --rpc-accounts             use JSON-RPC node for accounts and signing
###    -C, --chain=<chain>        remote node configuration preset
###    --keystore=<dir>           local keystore directory
###
### Transaction options:
###
###    -F, --from=<sender>        account to send transaction from
###    -G, --gas=<number>         number of gas units to provide
###    -P, --gas-price=<number>   price (in wei) of each gas unit
###    -T, --prio-fee             max priority fee (miner tip) in wei per gas
###    -N, --nonce=<number>       nonce value to use for the transaction
###    -V, --value=<number>       amount (in wei) of ETH to send
###    -S, --password=<file>      password for non-interactive signing
###
### Options for seth-call(1):
###
###    -B, --block=<number>       block number (default: `latest')
###    --hevm                     execute with hevm
###    --debug                    execute with hevm interactive mode
###    --trace                    dump a trace to stderr
###    --code                     overwrite the code of the called contract (hevm only)
###
### Options for seth-send(1):
###
###    --create                   use the calldata to create a new object
###    --guess                    guess the return value of the call
###    --status                   exit failure on failed tx (Byzantium)
###    --resend                   force current nonce to overwrite tx
###
### Options for seth-debug(1):
###
###    --no-src                   don't try to fetch contract source
###
### Options for seth-run-tx(1):
###
###    --debug                    run in hevm interactive mode
###    --trace                    dump a trace to stderr
###    --no-src                   don't try to fetch contract source
###    --source=<file>            path to combined.json source
###    --state=<dir>              directory to store hevm state in
###
### Options for seth-4byte-decode(1):
###
###    --id                       'earliest' or 'latest' or the ID number of a particular signature
###
### Other options:
###
###    --async                    do not wait for transaction receipt
###    --follow                   go into a loop watching for new logs
###    --json                     print output as JSON (if applicable)

OPTS="seth [<options>] <command> [<args>]
seth <command> --help
--
  Connection options:
rpc-host=host        JSON-RPC host (default: \`localhost')
rpc-port=port        JSON-RPC port (default: \`8545')
rpc-url=url          JSON-RPC URL (overrides host and port)
rpc-accounts         use JSON-RPC node for accounts and signing
C,chain=chain        remote node configuration preset
keystore=dir         local keystore directory

  Transaction options:
F,from=address       account to send transaction from
G,gas=number         number of gas units to provide
P,gas-price=number   price (in wei) of each gas unit
T,prio-fee=number    max priority fee (miner tip) in wei per gas
N,nonce=number       nonce value to use for the transaction
V,value=number       amount (in wei) of ETH to send
S,password=file      password for non-interactive signing

  Options for seth-block(1):
full                 get block with full transaction information

  Options for seth-call(1):
B,block=number       block number (default: \`latest')
hevm                 execute with hevm
debug                execute with hevm interactive mode
trace                dump a trace to stderr
code                 bytecode to replace the called contract with

  Options for seth-send(1):
create               use the calldata to create a new object
guess                guess the return value of the call
status               exit failure on failed tx (Byzantium)
resend               force current nonce to overwrite tx

  Options for seth-run-tx(1):
state=directory      git repo where state is kept
timestamp=number     block timestamp for the tx
debug                run in hevm's interactive debugger
trace                dump a trace to stderr
source=file          combined-json source information file

  Options for seth-debug(1):
no-src               don't fetch contract source

  Options for seth-bundle-source(1):
D,dir=directory      directory to store output

  Options for seth-4byte-decode(1):
id=string|number     'earliest' or 'latest' or the ID number of a particular signature

  Other options:
async                do not wait for transaction receipt
follow               go into a loop watching for new logs
j,json               print output as JSON (if applicable)
v,verbose            print additional debugging information
"

set -e

if ! [[ $SETH_INIT ]]; then
  export SETH_INIT=1
  # shellcheck source=/dev/null
  [[ -e ~/.sethrc ]] && . ~/.sethrc
  # shellcheck source=/dev/null
  [[ -e $XDG_CONFIG_HOME/seth/sethrc ]] && . "$XDG_CONFIG_HOME"/seth/sethrc
  # shellcheck source=/dev/null
  [[ $(pwd) != ~ && -e .sethrc ]] && . .sethrc
fi

if [[ $2 = --help ]]; then
  exec "${0##*/}" help -- "$1"
elif [[ $1 = -* ]] && command -v "${0##*/}-$1" &>/dev/null; then
  exec "${0##*/}-$1" "${@:2}"
fi

eval "$(git rev-parse --parseopt -- "$@" <<<"$OPTS" || echo exit $?)"

# To be reviewed in the future. It should be set depending on the chain:
export SETH_STATUS=yes

shopt -s extglob

while [[ $1 ]]; do
  case $1 in
    --)              shift; break;;

    --rpc-host)      shift; export ETH_RPC_HOST=$1;;
    --rpc-port)      shift; export ETH_RPC_PORT=$1;;
    --rpc-url)       shift; export ETH_RPC_URL=$1;;
    --rpc-accounts)         export ETH_RPC_ACCOUNTS=yes;;
    --keystore)      shift; export ETH_KEYSTORE=$1;;

    -C|--chain)      shift; export SETH_CHAIN=$1;;

    -B|--block)      shift; export ETH_BLOCK=$1;;
    -F|--from)       shift; export ETH_FROM=$(seth --to-address $1);;
    -G|--gas)        shift; export ETH_GAS=$1;;
    -P|--gas-price)  shift;
      export ETH_GAS_PRICE=$(seth --to-wei ${1%gwei} ${1##*([0-9])});;
    -T|--prio-fee)   shift;
      export ETH_PRIO_FEE=$(seth --to-wei ${1%gwei} ${1##*([0-9])});;
    -N|--nonce)      shift; export ETH_NONCE=$1;;
    -V|--value)      shift; export ETH_VALUE=$1;;
    -S|--password)   shift; export ETH_PASSWORD=$1;;

       --state)      shift; export HEVM_STATE=$1;;
       --timestamp)  shift; export HEVM_TIMESTAMP=$1;;
       --debug)             export HEVM_DEBUG=yes;;
       --trace)             export HEVM_TRACE=yes;;
       --hevm)              export HEVM_EXEC=yes;;
       --source)     shift; export DAPP_JSON=$1;;
       --code)       shift; export HEVM_CODE=$1;;

    -D|--dir)        shift; export SETH_DIR=$1;;

       --no-src)            export SETH_NOSRC=yes;;

       --full)              export SETH_FULL_BLOCK=yes;;

    -v|--verbose)           export SETH_VERBOSE=yes;;

       --create)            export SETH_CREATE=yes;;
       --guess)             export SETH_GUESS=yes;;
       --status)            export SETH_STATUS=yes;;
       --resend)            export SETH_RESEND=yes;;

       --async)             export SETH_ASYNC=yes;;
       --follow)            export SETH_FOLLOW=yes;;
    -j|--json)              export SETH_JSON=yes;;
       --id)         shift; export SETH_4BYTE_ID=$1;;

    *) printf "${0##*/}: internal error: %q\\n" "$1"; exit 1
  esac; shift
done

keystores=()

if [[ $SETH_CHAIN ]]; then

  case "$SETH_CHAIN" in
    ethlive|mainnet)
      eth_rpc_url=https://mainnet.infura.io/$INFURA_KEY
      export ETHERSCAN_API_URL=https://api.etherscan.io/api
      ;;
    ropsten)
      eth_rpc_url=https://$SETH_CHAIN.infura.io/$INFURA_KEY
      export ETHERSCAN_API_URL=https://api-$SETH_CHAIN.etherscan.io/api
      keystores=(
        ~/{.ethereum,Library/Ethereum}/testnet/keystore/
      )
      ;;
    kovan|rinkeby|goerli)
      eth_rpc_url=https://$SETH_CHAIN.infura.io/$INFURA_KEY
      export ETHERSCAN_API_URL=https://api-$SETH_CHAIN.etherscan.io/api
      keystores=(
        ~/{.ethereum,Library/Ethereum}/"$SETH_CHAIN"/keystore/
        ~/{.local/share,Library/Application\ Support}/io.parity.ethereum/keys/"$SETH_CHAIN"/
      )
      ;;
    optimism-mainnet)
      eth_rpc_url=https://optimism-mainnet.infura.io/$INFURA_KEY
      export ETHERSCAN_API_URL=https://api-optimistic.etherscan.io/api
      ;;
    optimism-kovan)
      eth_rpc_url=https://optimism-kovan.infura.io/$INFURA_KEY
      export ETHERSCAN_API_URL=https://api-kovan-optimistic.etherscan.io/api
      ;;
    arbitrum-mainnet)
      eth_rpc_url=https://arbitrum-mainnet.infura.io/$INFURA_KEY
      export ETHERSCAN_API_URL=https://api.arbiscan.io/api
      ;;
    bsctest)
      eth_rpc_url=https://data-seed-prebsc-2-s1.binance.org:8545/
      export ETHERSCAN_API_URL=https://api-testnet.bscscan.com/api
      ;;
    bsc)
      eth_rpc_url=https://bsc-dataseed3.binance.org/
      export ETHERSCAN_API_URL=https://api.bscscan.com/api
      ;;
    polygon)
      eth_rpc_url=https://polygon-rpc.com/
      export ETHERSCAN_API_URL=https://api.polygonscan.com/api
      ;;
    *)
      echo >&2 "${0##*/}: error: unknown chain: \\'$SETH_CHAIN'"
      exit 1
  esac
fi

# If needed, set ETH_KEYSTORE to a comma-separated list
if [[ ${#keystores[@]} -gt 0 ]]; then
  keystore=$(printf ",%s" "${keystores[@]}")
  keystore=${keystore:1}
  ETH_KEYSTORE=${ETH_KEYSTORE:-$keystore}
fi

[[ -n $ETH_KEYSTORE ]] && export ETH_KEYSTORE
export ETH_RPC_URL=${ETH_RPC_URL:-${eth_rpc_url:-${ETH_RPC_HOST:-http://127.0.0.1}:${ETH_RPC_PORT:-8545}}}

if ! [ -x "$(command -v "${0##*/}-${1-help}")" ]; then
    # look for approximate matches
    echo >&2 "'$1' is not a seth command. See 'seth help'."
    echo >&2
    echo >&2 "Most similar commands:"
    find "${0%seth}" -execdir echo {} ';' | agrep -1 "${0##*/}-${1-help}" >&2
    exit 1
fi

"${0##*/}-${1-help}" "${@:2}"
