#!/usr/bin/env bash
### seth-call -- call a contract without updating the blockchain
### Usage: seth call [<options>] <to> <sig> [<args>]
###    or: seth call [<options>] <to> [<data>]
###    or: seth call [<options>] --create <code> <sig> [<args>]
###    or: seth call [<options>] --create <code> [<data>]
###
### Perform a local call to <to> without publishing a transaction.
###
### If <sig> has the form `<name>(<types>)', infer <data> from <sig>/<args>.
### If no <data> is given, just call <to> without any calldata.
### With `--create', create a new object initialized from <code> and <data>.
### With `--create' and <sig>, encode constructor args <args> into <data>.
###
### With `-B <block>', use the state of the blockchain as of <block>.
### With `-F <sender>', simulate calling <to> from <sender>
### With `-V <value>', simulate transferring <value> to <to>.
###
### See also seth-send(1), seth-estimate(1), seth-storage(1), seth-code(1).
set -e
[[ $1 ]] || seth --fail-usage "$0"
if [[ $SETH_CREATE ]]; then
  DATA=$(seth --to-hexdata "$1")
  if [[ $2 ]]; then
    args=$(seth calldata "${@:2}")
    args=${args#0x}
    DATA+=${args:8}
  fi
else
  TO=$(seth --to-address "$1")
  if [[ $2 ]]; then
    DATA=$(seth calldata "${@:2}")
  fi
fi
jshon+=(-n {})
[[ $TO ]] && jshon+=(-s "$TO" -i to)
[[ $DATA ]] && jshon+=(-s "$DATA" -i data)
# shellcheck disable=SC2207
jshon+=($(seth --send-params))
jshon+=(-i append)
[[ $ETH_BLOCK = [0-9]* ]] && ETH_BLOCK=$(seth --to-hex "$ETH_BLOCK")
jshon+=(-s "${ETH_BLOCK-latest}" -i append)
result=$(seth rpc eth_call -- "${jshon[@]}")
seth --abi-decode "$2" "$result"
