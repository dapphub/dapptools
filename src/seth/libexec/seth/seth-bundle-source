#!/usr/bin/env bash
### seth-bundle-source -- fetch source and compile contract
### Usage: seth bundle-source <address> [<options>]
###
### Requires an etherscan api key
###
set -e

[[ -z "$1" ]] && seth --fail-usage

ETHERSCAN_SRC=$(seth etherscan-source "$1")

SOLC_VERSION=$(jq '.CompilerVersion' <<< "$ETHERSCAN_SRC")
SOLC_VERSION=${SOLC_VERSION/'"'}
SOLC_VERSION=${SOLC_VERSION/v}
SOLC_VERSION=${SOLC_VERSION/+*}

SOURCE="$(jq -r '.SourceCode' <<< "$ETHERSCAN_SRC" | tr -d '\r')"

case "$SOURCE" in
  \{*\})  # standard-json
    # for some reason etherscan surrounds the actual json with '{}'
    SOURCE="${SOURCE/#\{\{/\{}"
    SOURCE="${SOURCE/%\}\}/\}}"
    export DAPP_SOLC_JSON="$SOURCE"
    seth --use solc:"${SOLC_VERSION}" solc
    ;;

  *)  # flattened file
    NAME="$(jq -r '.ContractName' <<< "$ETHERSCAN_SRC")"
    FILE="${SETH_DIR:-.}/${NAME}.sol"
    echo "$SOURCE" > "$FILE"
    OPT=$(jq -r '.OptimizationUsed' <<< "$ETHERSCAN_SRC")
    if [[ "$OPT" -ne  0 ]]; then
        RUNS=$(jq -r '.Runs' <<< "$ETHERSCAN_SRC")
        export DAPP_SOLC_OPTIMIZE=true
        export DAPP_SOLC_OPTIMIZE_RUNS=$RUNS
    fi
    seth --use solc:"${SOLC_VERSION}" solc "$FILE"
    ;;
esac
